//
//  PlayerUI.m
//  PlayerUI
//
//  Created by xun.liu on 14/11/28.
//  Copyright (c) 2014年 xun.liu. All rights reserved.
//

#import "PlayerUI.h"
#import "Core.h"
#import "TTProgressSlider.h"

#define kBlackColor [UIColor colorWithRed:0 green:0 blue:0 alpha:0.3];
#define COLORWITHRGB(r,g,b,a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:(a)]

void callback (void *opaque, int result, int type);

@interface PlayerUI () <TTProgressSliderDelegate>
{
    void *_player;
    void *_captureimage;
    UIView *_playerView;
    
    UIView *_bottomView;
    UIView *_rightView;
    UIButton *_fullscreenButton;
    UIButton *_videoOverButton;
    UIButton *_playButton;
    UILabel *_durationLabel;
    UILabel *_currentTimeLabel;
    TTProgressSlider *_progressSlider;
    
    BOOL _isStop;
    NSString *_urlString;
}

@property (nonatomic, assign) BOOL  playing;
@property (nonatomic, assign) float sliderValue;
@property (nonatomic, assign) float sliderProgressValue;
@property (nonatomic, assign) double duration;
@property (nonatomic, assign) double currentTime;


@end

@implementation PlayerUI

- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
    
    }

    return self;
}

- (id)initWithFrame:(CGRect)frame URL:(NSString *)urlString
{
    self = [super initWithFrame:frame];
    if (self) {
        _urlString = urlString;
        char *url = (char *)[_urlString cStringUsingEncoding:NSASCIIStringEncoding];
        _player = player_create(url);
        if (!_player) {
            NSLog(@"创建失败");
            return nil;
        }
        _playerView = (__bridge PlayerUI *)_player;
        _playerView.frame = self.bounds;
        [self insertSubview:_playerView atIndex:0];
        
        player_register_callback(_player, callback, (__bridge void *)self);
        
        _isStop = NO;
        [self setupViews];
    }
    
//    _urlString = urlString;
//    char *url = (char *)[_urlString cStringUsingEncoding:NSASCIIStringEncoding];
//    _player = player_create(url);
//    if (!_player) {
//        NSLog(@"创建失败");
//        return nil;
//    }
//    self = (__bridge PlayerUI *)_player;
//    if (self) {
//        [self insertSubview:_playerView atIndex:0];
//        
//        player_register_callback(_player, callback, (__bridge void *)self);
//        
//        _isStop = NO;
//        [self setupViews];
//    }
    
    return self;
}

#pragma mark -
#pragma mark setup views
- (void)setupViews
{
    _duration = 0.0;
    _currentTime = 0.0;
    
    UIInterfaceOrientation toInterfaceOrientation = [UIApplication sharedApplication].statusBarOrientation;
    if (UIInterfaceOrientationIsLandscape(toInterfaceOrientation)) {

    }
    else {
        //bottom View
        _bottomView = [[UIView alloc] initWithFrame:CGRectMake(0, self.frame.size.height-42, self.frame.size.width, 42)];
        _bottomView.backgroundColor = kBlackColor;
        [self addSubview:_bottomView];
        
        _playButton = [UIButton buttonWithType:UIButtonTypeCustom];
        _playButton.frame = CGRectMake(0, 0, 47, _bottomView.frame.size.height);
        [_playButton setImage:[UIImage imageNamed:@"btn_play_nal.png"] forState:UIControlStateNormal];
        [_playButton addTarget:self action:@selector(playAction:) forControlEvents:UIControlEventTouchUpInside];
        [_bottomView addSubview:_playButton];
        
        _progressSlider = [[TTProgressSlider alloc] initWithFrame:CGRectMake(_playButton.frame.size.width+5, 12, 139, 16)];
        _progressSlider.delegate = self;
        _progressSlider.value = 0.0f;
        _progressSlider.progress = 0.0f;
        _progressSlider.thumbImage = [UIImage imageNamed:@"slider_thumb.png"];
//        _progressSlider.progressImage = [UIImage imageNamed:@"slider_buffer.png"];
//        _progressSlider.maximumTrackImage = [UIImage imageNamed:@"slider_bg_shu.png"];
//        _progressSlider.minimumTrackImage = [UIImage imageNamed:@"slider_progress.png"];
        _progressSlider.progressTintColor = COLORWITHRGB(255, 213, 171, 1);
        _progressSlider.maximumTrackTintColor = COLORWITHRGB(199, 199, 199, 1);
        _progressSlider.minimumTrackTintColor = COLORWITHRGB(254, 127, 0, 1);
        [_bottomView addSubview:_progressSlider];
        
        _currentTimeLabel = [[UILabel alloc] initWithFrame:CGRectMake(_progressSlider.frame.origin.x+_progressSlider.frame.size.width+5, 10, 42, 21)];
        _currentTimeLabel.text = [self convertTime:_currentTime append:@"/"];
        _currentTimeLabel.textAlignment = NSTextAlignmentRight;
        _currentTimeLabel.font = [UIFont systemFontOfSize:13.0];
        _currentTimeLabel.textColor = [UIColor whiteColor];
        _currentTimeLabel.backgroundColor = [UIColor clearColor];
        [_bottomView addSubview:_currentTimeLabel];
        
        _durationLabel = [[UILabel alloc] initWithFrame:CGRectMake(_currentTimeLabel.frame.origin.x+_currentTimeLabel.frame.size.width, 10, 38, 21)];
        _durationLabel.text = [self convertTime:_currentTime append:nil];
        _durationLabel.font = [UIFont systemFontOfSize:13.0];
        _durationLabel.textColor = [UIColor whiteColor];
        _durationLabel.backgroundColor = [UIColor clearColor];
        [_bottomView addSubview:_durationLabel];
        
        
        //right View;
        _rightView = [[UIView alloc] initWithFrame:CGRectMake(self.frame.size.width-42, self.frame.size.height-132, 42, 90)];
        _rightView.backgroundColor = [UIColor clearColor];
        [self addSubview:_rightView];
        
        _fullscreenButton = [UIButton buttonWithType:UIButtonTypeCustom];
        _fullscreenButton.frame = CGRectMake(0, 0, _rightView.bounds.size.width, _rightView.bounds.size.width);
        [_fullscreenButton setImage:[UIImage imageNamed:@"btn_fullScreen_nal.png"] forState:UIControlStateNormal];
        [_fullscreenButton addTarget:self action:@selector(fullscreenAction:) forControlEvents:UIControlEventTouchUpInside];
        [_rightView addSubview:_fullscreenButton];
        
        _videoOverButton = [UIButton buttonWithType:UIButtonTypeCustom];
        _videoOverButton.frame = CGRectMake(0, _fullscreenButton.frame.origin.y+_fullscreenButton.frame.size.height+5, _rightView.bounds.size.width, _rightView.bounds.size.width);
        [_videoOverButton setImage:[UIImage imageNamed:@"btn_videoOver_nal.png"] forState:UIControlStateNormal];
        [_videoOverButton addTarget:self action:@selector(videoOverAction:) forControlEvents:UIControlEventTouchUpInside];
        [_rightView addSubview:_videoOverButton];
    }
}

#pragma mark - 
#pragma mark layoutSubviews
- (void)layoutSubviews
{
    [super layoutSubviews];
    
    _playerView.frame = self.bounds;

    UIInterfaceOrientation toInterfaceOrientation = [UIApplication sharedApplication].statusBarOrientation;
    if (UIInterfaceOrientationIsLandscape(toInterfaceOrientation)) {
        _bottomView.frame = CGRectMake(0, kScreenWidth-42, kScreenHeight, 42);
        _rightView.frame = CGRectMake(kScreenHeight-42, kScreenWidth-132, 42, 90);
        _playerView.frame = CGRectMake(0, 0, kScreenHeight, kScreenWidth);
        
        _progressSlider.frame = CGRectMake(_playButton.frame.size.width+5, 12, 370, 16);
        _currentTimeLabel.frame = CGRectMake(_progressSlider.frame.origin.x+_progressSlider.frame.size.width+5, 10, 42, 21);
        _durationLabel.frame = CGRectMake(_currentTimeLabel.frame.origin.x+_currentTimeLabel.frame.size.width, 10, 38, 21);
        
        [_fullscreenButton setImage:[UIImage imageNamed:@"btn_notFullscreen_nal.png"] forState:UIControlStateNormal];
    }
    else {
        _bottomView.frame = CGRectMake(0, self.frame.size.height-42, kScreenWidth, 42);
        _rightView.frame = CGRectMake(self.frame.size.width-42, self.frame.size.height-132, 42, 90);
        _playerView.frame = CGRectMake(0, 0, kScreenWidth, self.frame.size.height);
        
        _progressSlider.frame = CGRectMake(_playButton.frame.size.width+5, 12, 139, 16);
        _currentTimeLabel.frame = CGRectMake(_progressSlider.frame.origin.x+_progressSlider.frame.size.width+5, 10, 42, 21);
        _durationLabel.frame = CGRectMake(_currentTimeLabel.frame.origin.x+_currentTimeLabel.frame.size.width, 10, 38, 21);
        
        [_fullscreenButton setImage:[UIImage imageNamed:@"btn_fullScreen_nal.png"] forState:UIControlStateNormal];
    }
}

#pragma mark - 
#pragma mark video player callback
void callback (void *opaque, int result, int type)
{
    PlayerUI *playerUI = (__bridge PlayerUI *)opaque;
    [playerUI callbackAction:type result:result];
}


- (void)callbackAction:(int)type result:(int)result
{
    if (type == 0) {
        NSLog(@"视频加载失败");
        _isStop = YES;
    }
    else if (type == 1) {  //视频加载成功
        //play
        player_play(_player);
        //获取视频总时间
        player_get_duration(_player, &_duration);
        _durationLabel.text = [self convertTime:_duration append:nil];
        //获取当前音量值
        float volume;
        player_get_currentVolume(_player, &volume);
        NSLog(@"current volume is %f", volume);
    }
    else if (type == 2) {
        _currentTime = result/1000;
        if (_duration != 0) {
            _progressSlider.value = _currentTime/_duration;
            _currentTimeLabel.text = [self convertTime:_currentTime append:@"/"];         
        }
    }
    else if (type == 3) {
        if (_duration != 0) {
            _progressSlider.progress = (result/1000)/_duration;
        }
    }
    else if (type == 4) {
        player_set_progress(_player, 0);
        player_pause(_player);
        _playButton.selected = YES;
        [_playButton setImage:[UIImage imageNamed:@"btn_pause_nal.png"] forState:UIControlStateNormal];
    }
    else if (type == 5) {
        //result = 0：播放停了     result = 1：播放正常
        NSLog(@"rate =  %d", result);
    }
    
}

/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect {
    // Drawing code
}
*/

#pragma mark -
#pragma mark button action
- (void)fullscreenAction:(UIButton *)sender
{
    if (_delegate && [_delegate respondsToSelector:@selector(fullScreenAction)]) {
        [_delegate fullScreenAction];
    }
}

- (void)videoOverAction:(UIButton *)sender
{
    player_stop(_player);
    [_playButton setImage:[UIImage imageNamed:@"btn_pause_nal.png"] forState:UIControlStateNormal];
    _isStop = YES;
    
    if (_delegate && [_delegate respondsToSelector:@selector(videoDidOver)]) {
        [_delegate videoDidOver];
    }
}

- (void)playAction:(UIButton *)sender
{
    if (!_isStop) {
        if (sender.selected) {
            player_play(_player);
            [_playButton setImage:[UIImage imageNamed:@"btn_play_nal.png"] forState:UIControlStateNormal];
        }
        else {
            player_pause(_player);
            [_playButton setImage:[UIImage imageNamed:@"btn_pause_nal.png"] forState:UIControlStateNormal];
        }
        
        sender.selected = !sender.selected;
    }
    else {
        char *url = (char *)[_urlString cStringUsingEncoding:NSASCIIStringEncoding];
        _player = player_create(url);
        if (!_player) {
            NSLog(@"创建失败");
            return;
        }
        _playerView = (__bridge PlayerUI *)_player;
        _playerView.frame = self.bounds;
        [self insertSubview:_playerView atIndex:0];
        
        player_register_callback(_player, callback, (__bridge void *)self);
        
        _isStop = NO;
    }
}

#pragma mark -
#pragma mark TTProgressSliderDelegate
- (void)progressSliderDidStart:(TTProgressSlider *)progressSlider value:(float)value
{
    NSLog(@"===sliderDidStart = %f", value);
}

- (void)progressSliderMoving:(TTProgressSlider *)progressSlider value:(float)value
{
    NSLog(@"===sliderMoving = %f", value);
    //获取所点进度处捕获的视频图像
    _captureimage = player_get_captureImage(_player, _duration*value);
    UIImage *image = (__bridge UIImage *)_captureimage;
    UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 320*70/240.0, 70)];
    imageView.backgroundColor = [UIColor clearColor];
    imageView.image = image;
    [self addSubview:imageView];
}

- (void)progressSliderDidMoveEnd:(TTProgressSlider *)progressSlider value:(float)value
{
    NSLog(@"===sliderDidMoveEnd = %f", value);
    
    //seek
    double progress = _duration * value;
    player_set_progress(_player, progress);
    _currentTime = progress;
}

#pragma mark -
#pragma mark Kit
- (NSString *)convertTime:(CGFloat)second append:(NSString *)append
{
    NSMutableString *str = [NSMutableString string];
    int m = second/60;
    if (m <= 9)
    {
        [str appendFormat:@"0%d",m];
    }
    else
        [str appendFormat:@"%d",m];
    
    int s = (int)second%60;
    if (s <= 9)
    {
        [str appendFormat:@":0%d",s];
    }
    else
        [str appendFormat:@":%d",s];
    
    if (append)
    {
        [str appendString:append];
    }
    
    return str;
}


@end
